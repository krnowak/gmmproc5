access key
  trivial constexpr empty class
index
  integral constant
part
storage
  template <typename N> decltype(auto) operator[] (index&&); // returns stuff at index
storage tag
  adl function - get_storage_type(storage_tag, hana::type<part>...) -> hana::type<storage>
resolved storage tag
  trivial class
  type storage_tag
  type parts - hana::tuple_t<part...>
  type storage_type - hana::type<storage>
getter base
  parameterized by node info
  needed data from node info:
  - storage type
  - for an access key:
    - policy for a getter tag
    - index of an access key in the storage
getter implementations
  subclasses getter base
  single getter
  vector getter
  map getter
  mapvector getter
  â€¦
getter policy (for a specific getter, not a general thing)
  must specify a get method that takes a tuple element as a first parameter and the optional followup parameters are implementation specific.
getter tag
  adl function - get_getter(tag, resolved_storage_tag) -> hana::type<getter<node info>>
tuple and map (TAM)
  holds a tuple of pairs and a map created with hana::to_map(tuple)
  the tuple is to have a defined order of the members, map for fast lookup
getters
  TAM<tuple<pair<getter tag, getter policy>...>>
access info
  TAM<tuple<pair<access key, getters>...>>
access key info
  getters
  index
resolved access info
  TAM<tuple<pair<access key, access key info>...>>
node info
  storage type
  resolved access info
getters info
  unique getter tags (tuple<getter tag>)
  resolved access info